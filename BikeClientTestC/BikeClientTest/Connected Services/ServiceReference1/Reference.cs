//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BikeClientTest.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBikeService")]
    public interface IBikeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getContracts", ReplyAction="http://tempuri.org/IBikeService/getContractsResponse")]
        string getContracts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getContracts", ReplyAction="http://tempuri.org/IBikeService/getContractsResponse")]
        System.Threading.Tasks.Task<string> getContractsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStations", ReplyAction="http://tempuri.org/IBikeService/getStationsResponse")]
        string getStations(string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStations", ReplyAction="http://tempuri.org/IBikeService/getStationsResponse")]
        System.Threading.Tasks.Task<string> getStationsAsync(string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStation", ReplyAction="http://tempuri.org/IBikeService/getStationResponse")]
        string getStation(string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStation", ReplyAction="http://tempuri.org/IBikeService/getStationResponse")]
        System.Threading.Tasks.Task<string> getStationAsync(string station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStationInGivenCityCloseToUs", ReplyAction="http://tempuri.org/IBikeService/getStationInGivenCityCloseToUsResponse")]
        string getStationInGivenCityCloseToUs(double latitude, double longitude, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/getStationInGivenCityCloseToUs", ReplyAction="http://tempuri.org/IBikeService/getStationInGivenCityCloseToUsResponse")]
        System.Threading.Tasks.Task<string> getStationInGivenCityCloseToUsAsync(double latitude, double longitude, string city);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBikeServiceChannel : BikeClientTest.ServiceReference1.IBikeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BikeServiceClient : System.ServiceModel.ClientBase<BikeClientTest.ServiceReference1.IBikeService>, BikeClientTest.ServiceReference1.IBikeService {
        
        public BikeServiceClient() {
        }
        
        public BikeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BikeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getContracts() {
            return base.Channel.getContracts();
        }
        
        public System.Threading.Tasks.Task<string> getContractsAsync() {
            return base.Channel.getContractsAsync();
        }
        
        public string getStations(string contract) {
            return base.Channel.getStations(contract);
        }
        
        public System.Threading.Tasks.Task<string> getStationsAsync(string contract) {
            return base.Channel.getStationsAsync(contract);
        }
        
        public string getStation(string station) {
            return base.Channel.getStation(station);
        }
        
        public System.Threading.Tasks.Task<string> getStationAsync(string station) {
            return base.Channel.getStationAsync(station);
        }
        
        public string getStationInGivenCityCloseToUs(double latitude, double longitude, string city) {
            return base.Channel.getStationInGivenCityCloseToUs(latitude, longitude, city);
        }
        
        public System.Threading.Tasks.Task<string> getStationInGivenCityCloseToUsAsync(double latitude, double longitude, string city) {
            return base.Channel.getStationInGivenCityCloseToUsAsync(latitude, longitude, city);
        }
    }
}
